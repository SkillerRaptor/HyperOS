/*
 * Copyright (c) 2020-2021, SkillerRaptor <skillerraptor@protonmail.com>
 *
 * SPDX-License-Identifier: MIT
 */

#pragma once

#include <cassert>
#include <cstddef>
#include <iterator>
#include <details/char_traits.h>

namespace std
{
	template <typename T, typename Traits = char_traits<T>>
	class basic_string_view
	{
	public:
		using value_type = T;
		using reference = value_type&;
		using const_reference = const value_type&;
		using pointer = value_type*;
		using const_pointer = const value_type*;
		using size_type = size_t;
		using difference_type = ptrdiff_t;
		using iterator = __legacy_iterator<pointer>;
		using const_iterator = __legacy_iterator<const_pointer>;
		using reverse_iterator = std::reverse_iterator<iterator>;
		using const_reverse_iterator = std::reverse_iterator<const_iterator>;
		using traits_type = Traits;

		static constexpr size_type npos = static_cast<size_type>(-1);

	public:
		constexpr basic_string_view() noexcept
		{
		}

		constexpr basic_string_view(const basic_string_view&) noexcept = default;
		constexpr basic_string_view& operator=(const basic_string_view&) noexcept = default;

		constexpr basic_string_view(const_pointer string)
			: m_data(string)
			, m_size(m_data == nullptr ? 0 : traits_type::length(m_data))
		{
		}

		constexpr basic_string_view(nullptr_t) = delete;

		constexpr basic_string_view(const_pointer string, size_type length)
			: m_data(string)
			, m_size(length)
		{
		}

		template <class IteratorBegin, class IteratorEnd>
		constexpr basic_string_view(IteratorBegin begin, IteratorEnd end)
			: m_data(begin)
			, m_size(end - begin)
		{
		}

		constexpr const_iterator begin() const noexcept
		{
			return iterator(&m_data[0]);
		}

		constexpr const_iterator end() const noexcept
		{
			return iterator(&m_data[size()]);
		}

		constexpr const_iterator cbegin() const noexcept
		{
			return const_iterator(&m_data[0]);
		}

		constexpr const_iterator cend() const noexcept
		{
			return const_iterator(&m_data[size()]);
		}

		constexpr const_reverse_iterator rbegin() const noexcept
		{
			return reverse_iterator(&m_data[size() - 1]);
		}

		constexpr const_reverse_iterator rend() const noexcept
		{
			return reverse_iterator(&m_data[-1]);
		}

		constexpr const_reverse_iterator crbegin() const noexcept
		{
			return const_reverse_iterator(&m_data[size() - 1]);
		}

		constexpr const_reverse_iterator crend() const noexcept
		{
			return const_reverse_iterator(&m_data[-1]);
		}

		constexpr size_type size() const noexcept
		{
			return m_size;
		}

		constexpr size_type length() const noexcept
		{
			return m_size;
		}

		constexpr size_type max_size() const noexcept
		{
			return m_size;
		}

		[[nodiscard]] constexpr bool empty() const noexcept
		{
			return size() == 0;
		}

		constexpr const_reference operator[](size_type position) const
		{
			return m_data[position];
		}

		constexpr const_reference at(size_type position) const
		{
			assert(position < size());
			return m_data[position];
		}

		constexpr const_reference front() const
		{
			return *begin();
		}

		constexpr const_reference back() const
		{
			return *prev(end());
		}

		constexpr const_pointer data() const noexcept
		{
			return m_data;
		}

	private:
		const_pointer m_data;
		size_type m_size;
	};

	using string_view = basic_string_view<char>;
	using wstring_view = basic_string_view<wchar_t>;
	using u8string_view = basic_string_view<char8_t>;
	using u16string_view = basic_string_view<char16_t>;
	using u32string_view = basic_string_view<char32_t>;
} // namespace std