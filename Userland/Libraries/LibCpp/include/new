/*
 * Copyright (c) 2020-2021, SkillerRaptor <skillerraptor@protonmail.com>
 *
 * SPDX-License-Identifier: MIT
 */

#pragma once

#include <cstddef>

namespace std
{
	enum class align_val_t : size_t
	{
	};

	struct nothrow_t
	{
		explicit nothrow_t() = default;
	};

	extern const nothrow_t nothrow;
} // namespace std

[[nodiscard]] void* operator new(std::size_t size);

void operator delete(void* ptr) noexcept;
void operator delete(void* ptr, std::size_t) noexcept;

[[nodiscard]] void* operator new[](std::size_t size);

void operator delete[](void* ptr) noexcept;
void operator delete[](void* ptr, std::size_t) noexcept;

[[nodiscard]] void* operator new(std::size_t, void* ptr) noexcept;
[[nodiscard]] void* operator new[](std::size_t, void* ptr) noexcept;
void operator delete(void* ptr, void*) noexcept;
void operator delete[](void* ptr, void*) noexcept;
