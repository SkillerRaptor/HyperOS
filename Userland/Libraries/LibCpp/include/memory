/*
 * Copyright (c) 2020-2021, SkillerRaptor <skillerraptor@protonmail.com>
 *
 * SPDX-License-Identifier: MIT
 */

#pragma once

#include <cstddef>
#include <type_traits>

namespace std
{
	template <class Ptr>
	class pointer_traits
	{
	private:
		template <typename T>
		using __element_type = typename T::element_type;

		template <typename T>
		using __difference_type = typename T::difference_type;

	public:
		using pointer = Ptr;
		using element_type = __detected_or_t<Ptr, __element_type, Ptr>;
		using difference_type = __detected_or_t<ptrdiff_t, __difference_type, Ptr>;
	};

	template <class T>
	struct pointer_traits<T*>
	{
		using pointer = T*;
		using element_type = T;
		using difference_type = ptrdiff_t;
	};

	template <typename T>
	class allocator
	{
	public:
		using value_type = T;
		using size_type = size_t;
		using difference_type = ptrdiff_t;

	public:
		constexpr allocator() noexcept = default;

		[[nodiscard]] constexpr T* allocate(size_type n)
		{
			return reinterpret_cast<T*>(::operator new(n * sizeof(T)));
		}

		constexpr void deallocate(T* ptr, size_type)
		{
			::operator delete(reinterpret_cast<void*>(ptr));
		}
	};
} // namespace std
