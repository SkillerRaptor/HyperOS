/*
 * Copyright (c) 2020-2021, SkillerRaptor <skillerraptor@protonmail.com>
 *
 * SPDX-License-Identifier: MIT
 */

#pragma once

namespace std
{
	template <class T = void>
	struct equal_to
	{
		constexpr bool operator()(const T& left, const T& right) const
		{
			return left == right;
		}
	};

	template <class T = void>
	struct not_equal_to
	{
		constexpr bool operator()(const T& left, const T& right) const
		{
			return left != right;
		}
	};

	template <class T = void>
	struct greater
	{
		constexpr bool operator()(const T& left, const T& right) const
		{
			return left > right;
		}
	};

	template <class T = void>
	struct less
	{
		constexpr bool operator()(const T& left, const T& right) const
		{
			return left < right;
		}
	};

	template <class T = void>
	struct greater_equal
	{
		constexpr bool operator()(const T& left, const T& right) const
		{
			return left >= right;
		}
	};

	template <class T = void>
	struct less_equal
	{
		constexpr bool operator()(const T& left, const T& right) const
		{
			return left <= right;
		}
	};
} // namespace std