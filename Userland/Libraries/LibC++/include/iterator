/*
 * Copyright (c) 2020-2021, SkillerRaptor <skillerraptor@protonmail.com>
 *
 * SPDX-License-Identifier: MIT
 */

#pragma once

#include <cstddef>

namespace std
{
	struct input_iterator_tag
	{
	};

	struct output_iterator_tag
	{
	};

	struct forward_iterator_tag : public input_iterator_tag
	{
	};

	struct bidirectional_iterator_tag : public forward_iterator_tag
	{
	};

	struct random_access_iterator_tag : public bidirectional_iterator_tag
	{
	};

	template <class Iterator>
	struct iterator_traits
	{
		using value_type = typename Iterator::value_type;
		using difference_type = typename Iterator::difference_type;
		using pointer = typename Iterator::pointer;
		using reference = typename Iterator::reference;
		using iterator_category = typename Iterator::iterator_category;
	};

	template <class T>
	struct iterator_traits<T*>
	{
		using value_type = T;
		using pointer = value_type*;
		using reference = value_type&;
		using difference_type = ptrdiff_t;
		using iterator_category = random_access_iterator_tag;
	};

	template <class T>
	class __legacy_iterator
	{
	};

	template <class T>
	class __legacy_iterator<T*>
	{
	public:
		using value_type = T;
		using pointer = value_type*;
		using reference = value_type&;
		using difference_type = ptrdiff_t;
		using iterator_category = random_access_iterator_tag;

	public:
		__legacy_iterator() = default;
		__legacy_iterator(pointer ptr)
			: m_ptr(ptr)
		{
		}

		~__legacy_iterator() = default;

		bool operator!=(const __legacy_iterator& other) const
		{
			return m_ptr != other.m_ptr;
		}

		bool operator==(const __legacy_iterator& other) const
		{
			return m_ptr == other.m_ptr;
		}

		bool operator<(const __legacy_iterator& other) const
		{
			return m_ptr < other.m_ptr;
		}

		bool operator>(const __legacy_iterator& other) const
		{
			return m_ptr > other.m_ptr;
		}

		bool operator>=(const __legacy_iterator& other) const
		{
			return m_ptr >= other.m_ptr;
		}

		bool operator<=(const __legacy_iterator& other) const
		{
			return m_ptr <= other.m_ptr;
		}

		__legacy_iterator& operator++()
		{
			++m_ptr;
			return *this;
		}

		__legacy_iterator& operator--()
		{
			--m_ptr;
			return *this;
		}

		__legacy_iterator operator++(int)
		{
			__legacy_iterator* temp = *this;
			++m_ptr;
			return temp;
		}

		__legacy_iterator operator--(int)
		{
			__legacy_iterator* temp = *this;
			--m_ptr;
			return temp;
		}

		__legacy_iterator operator-(difference_type value)
		{
			return { m_ptr - value };
		}

		__legacy_iterator operator+(difference_type value)
		{
			return { m_ptr + value };
		}

		__legacy_iterator& operator+=(difference_type value)
		{
			m_ptr += value;
			return *this;
		}

		__legacy_iterator& operator-=(difference_type value)
		{
			m_ptr -= value;
			return *this;
		}

		__legacy_iterator& operator=(const __legacy_iterator& other)
		{
			m_ptr = other.m_ptr;
			return *this;
		}

		reference operator*()
		{
			return *m_ptr;
		}

		difference_type operator-(const __legacy_iterator& other)
		{
			return m_ptr - other.m_ptr;
		}

		constexpr reference operator[](difference_type position) const
		{
			return m_ptr[position];
		}

	private:
		pointer m_ptr{ nullptr };
	};

	template <class Iterator>
	class reverse_iterator
	{
	public:
		using value_type = typename Iterator::value_type;
		using pointer = typename Iterator::pointer;
		using reference = typename Iterator::reference;
		using difference_type = typename Iterator::difference_type;
		using iterator_type = Iterator;
		using iterator_category = typename Iterator::iterator_category;

	public:
		constexpr reverse_iterator() = default;
		~reverse_iterator() = default;

		constexpr explicit reverse_iterator(iterator_type base_iterator)
			: m_base(base_iterator)
		{
		}

		constexpr iterator_type base() const
		{
			return m_base;
		}

		bool operator!=(const reverse_iterator& other) const
		{
			return m_base != other.m_base;
		}

		bool operator==(const reverse_iterator& other) const
		{
			return m_base == other.m_base;
		}

		bool operator<(const reverse_iterator& other) const
		{
			return m_base < other.m_base;
		}

		bool operator>(const reverse_iterator& other) const
		{
			return m_base > other.m_base;
		}

		bool operator>=(const reverse_iterator& other) const
		{
			return m_base >= other.m_base;
		}

		bool operator<=(const reverse_iterator& other) const
		{
			return m_base <= other.m_base;
		}

		reverse_iterator& operator++()
		{
			--m_base;
			return *this;
		}

		reverse_iterator& operator--()
		{
			++m_base;
			return *this;
		}

		reverse_iterator operator++(int)
		{
			reverse_iterator* temp = *this;
			--m_base;
			return temp;
		}

		reverse_iterator operator--(int)
		{
			reverse_iterator* temp = *this;
			++m_base;
			return temp;
		}

		reverse_iterator operator-(difference_type value)
		{
			return { m_base + value };
		}

		reverse_iterator operator+(difference_type value)
		{
			return { m_base - value };
		}

		reverse_iterator& operator+=(difference_type value)
		{
			m_base -= value;
			return *this;
		}

		reverse_iterator& operator-=(difference_type value)
		{
			m_base += value;
			return *this;
		}

		reverse_iterator& operator=(const reverse_iterator& other)
		{
			m_base = other.m_base;
			return *this;
		}

		reference operator*()
		{
			return *m_base;
		}

		difference_type operator-(const reverse_iterator& other)
		{
			return other.m_base - m_base;
		}

		constexpr reference operator[](difference_type position) const
		{
			return m_base[-position];
		}

	private:
		iterator_type m_base{};
	};

	template <class Iterator, class Distance>
	constexpr void advance(Iterator& iterator, Distance distance)
	{
		iterator += distance;
	}

	template <class Iterator>
	constexpr typename iterator_traits<Iterator>::difference_type distance(Iterator first, Iterator last)
	{
		return last - first;
	}

	template <class Iterator>
	constexpr Iterator next(Iterator iterator, typename iterator_traits<Iterator>::difference_type distance = 1)
	{
		advance(iterator, distance);
		return iterator;
	}

	template <class Iterator>
	constexpr Iterator prev(Iterator iterator, typename iterator_traits<Iterator>::difference_type distance = 1)
	{
		advance(iterator, -distance);
		return iterator;
	}
} // namespace std
