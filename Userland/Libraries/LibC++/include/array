/*
 * Copyright (c) 2020-2021, SkillerRaptor <skillerraptor@protonmail.com>
 *
 * SPDX-License-Identifier: MIT
 */

#pragma once

#include <cassert>
#include <cstddef>
#include <iterator>
#include <type_traits>

namespace std
{
	template <class T, std::size_t N>
	class array
	{
	public:
		using value_type = T;
		using reference = value_type&;
		using const_reference = const value_type&;
		using pointer = value_type*;
		using const_pointer = const value_type*;
		using size_type = size_t;
		using difference_type = ptrdiff_t;
		using iterator = __legacy_iterator<pointer>;
		using const_iterator = __legacy_iterator<const_pointer>;
		using reverse_iterator = std::reverse_iterator<iterator>;
		using const_reverse_iterator = std::reverse_iterator<const_iterator>;

	public:
		constexpr iterator begin() noexcept
		{
			return iterator(&m_data[0]);
		}

		constexpr const_iterator begin() const noexcept
		{
			return const_iterator(&m_data[0]);
		}

		constexpr iterator end() noexcept
		{
			return iterator(&m_data[size()]);
		}

		constexpr const_iterator end() const noexcept
		{
			return const_iterator(&m_data[size()]);
		}

		constexpr reverse_iterator rbegin() noexcept
		{
			return reverse_iterator(&m_data[size() - 1]);
		}

		constexpr const_reverse_iterator rbegin() const noexcept
		{
			return const_reverse_iterator(&m_data[size() - 1]);
		}

		constexpr reverse_iterator rend() noexcept
		{
			return reverse_iterator(&m_data[-1]);
		}

		constexpr const_reverse_iterator rend() const noexcept
		{
			return const_reverse_iterator(&m_data[-1]);
		}

		constexpr const_iterator cbegin() const noexcept
		{
			return const_iterator(&m_data[0]);
		}

		constexpr const_iterator cend() const noexcept
		{
			return const_iterator(&m_data[size()]);
		}

		constexpr const_reverse_iterator crbegin() const noexcept
		{
			return const_reverse_iterator(&m_data[size() - 1]);
		}

		constexpr const_reverse_iterator crend() const noexcept
		{
			return const_reverse_iterator(&m_data[-1]);
		}

		[[nodiscard]] constexpr bool empty() const noexcept
		{
			return size() == 0;
		}

		constexpr size_type size() const noexcept
		{
			return N;
		}

		constexpr size_type max_size() const noexcept
		{
			return N;
		}

		constexpr reference operator[](size_type position)
		{
			return m_data[position];
		}

		constexpr const_reference operator[](size_type position) const
		{
			return m_data[position];
		}

		constexpr reference at(size_type position)
		{
			assert(position < size());
			return m_data[position];
		}

		constexpr const_reference at(size_type position) const
		{
			assert(position < size());
			return m_data[position];
		}

		constexpr reference front()
		{
			return *begin();
		}

		constexpr const_reference front() const
		{
			return *begin();
		}

		constexpr reference back()
		{
			return *prev(end());
		}

		constexpr const_reference back() const
		{
			return *prev(end());
		}

		constexpr pointer data() noexcept
		{
			return m_data;
		}

		constexpr const_pointer data() const noexcept
		{
			return m_data;
		}

	private:
		value_type m_data[N];
	};
} // namespace std
