/*
 * Copyright (c) 2020-2021, SkillerRaptor <skillerraptor@protonmail.com>
 *
 * SPDX-License-Identifier: MIT
 */

#pragma once

#include <type_traits>

namespace std
{
	template <typename T>
	constexpr T&& forward(typename remove_reference<T>::type& t) noexcept
	{
		return static_cast<T&&>(t);
	}

	template <typename T>
	constexpr T&& forward(typename remove_reference<T>::type&& t) noexcept
	{
		return static_cast<T&&>(t);
	}

	template <typename T>
	constexpr typename remove_reference<T>::type&& move(T&& t) noexcept
	{
		return static_cast<typename remove_reference<T>::type&&>(t);
	}

	template <typename T1, typename T2>
	class pair
	{
	public:
		using first_type = T1;
		using second_type = T2;

	public:
		constexpr pair()
			: first()
			, second()
		{
		}

		constexpr pair(const first_type& first, const second_type& second)
			: first(first)
			, second(second)
		{
		}

		template <class U1 = T1, class U2 = T2>
		constexpr pair(const U1& first, const U2& second)
			: first(first)
			, second(second)
		{
		}

		template <class U1, class U2>
		constexpr pair(const pair<U1, U2>& other)
			: first(other.first)
			, second(other.second)
		{
		}

		template <class U1, class U2>
		constexpr pair(pair<U1, U2>&& other)
			: first(move(other.first))
			, second(move(other.second))
		{
		}

		pair(const pair& other) = default;
		pair(pair&& other) = default;

	public:
		T1 first;
		T2 second;
	};

	template <typename T1, typename T2>
	constexpr pair<T1, T2> make_pair(T1&& first, T2&& second)
	{
		return pair<T1, T2>(forward<T1>(first), forward<T2>(second));
	}

	template <typename T, T... I>
	struct integer_sequence
	{
		using value_type = T;

		static constexpr size_t size() noexcept
		{
			return sizeof...(I);
		}
	};

	template <typename T, T N>
	using make_integer_sequence = integer_sequence<T, __integer_pack(N)...>;

	template <size_t... I>
	using index_sequence = integer_sequence<size_t, I...>;

	template <size_t N>
	using make_index_sequence = make_integer_sequence<size_t, N>;

	template <typename... T>
	using index_sequence_for = make_index_sequence<sizeof...(T)>;
} // namespace std
